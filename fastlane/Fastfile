fastlane_require 'yaml'
fastlane_version "2.105.2"

setup_travis

default_platform(:ios)

platform :ios do

  lane :iamdeveloper do

    UI.header "Initialization of configuration files"

    url = UI.input("Git URL (ssh):")

    branch = UI.input("Git branch (if empty will be used \"HEAD\"):")

    if branch.empty?
      branch = "HEAD"
    end

    UI.message "File download begins"
    print sh("git archive --format=tar --remote=#{url} #{branch} | gzip > ./../config.tar.gz")
    
    UI.message "Unpacking files"

    print sh("tar xf ./../config.tar.gz -C ./..")
    print sh("rm ./../config.tar.gz")

    UI.message "Generate xcconfig" 
  
    config_project_for_network_test(type: ENV['DEVNET_TITLE'])

  end

  before_all do |lane, options|
    
    print lane

    libraries

  end

  lane :tests do
    
    go_test(
      scheme: ENV['PROJECT_SCHEME']
    ) 

  end

  lane :network_tests do

    go_test(
      scheme: ENV['PROJECT_NETWORK_SCHEME'],
      output: ENV['OUTPUT_TEST_REPORT_NETWORK'],
      type: ENV['DEVNET_TITLE']
    )

  end

  lane :analysis do

    sonar(
      project_key: "org.echo.mobile.framework",
      project_version: "3.1",
      project_name: "ECHO",
      sources_path: File.expand_path("../ECHO")
    )

  end


  private_lane :go_test do | options |

    if options[:type]
      config_project_for_network_test(type: options[:type])
    end

    if options[:output].nil? 
      output = ENV['OUTPUT_TEST_REPORT']
    end

    run_tests(
      scheme: options[:scheme],
      sdk: "iphonesimulator",
      devices: ["iPhone X"],
      clean: true,
      output_directory: options[:output]
    )
  
  end

  private_lane :config_project_for_network_test do | options |

    case options[:type]
    when "devnet"
      properties = YAML.load_file(ENV['DEVNET_PROPERTIES'])
    when "testnet"
      properties = YAML.load_file(ENV['TESTNET_PROPERTIES'])
    end

    app_config = ENV['XCCONFIG_NETWORK_TEST_CONFIG_DEFAULT']

    configuration = Xcodeproj::Config.new(app_config)
    
    properties.each do | key, value |
      configuration.attributes["#{key}"] = "#{value}"
    end

    temp_configuration_path = ENV['XCCONFIG_NETWORK_TEST_CONFIG_LOCAL']

    File.open(temp_configuration_path, "w") do |f|     
      f.write(configuration.to_s())   
    end
  
  end

  lane :release do
    
    increment_version

    config_documentation

  end

  lane :config_documentation do

    jazzy(
      config: ".jazzy.yaml"
    )

  end

  private_lane :increment_version do 

    version_number = (YAML::load_file(File.join(__dir__, ENV['VERSION_FILE'])))['version']
    
    major, minor, patch = version_number.split(".")
    patch = patch.to_i + 1

    version_number = "#{major}.#{minor}.#{patch}"

    File.open(ENV['VERSION_FILE'], 'w') {|f| f.write "version: #{version_number}" }

    increment_version_number(
      version_number: version_number
    )

    version_bump_podspec(
      path: ENV['PODSPEC_NAME'],
      version_number: version_number
    )

  end

  private_lane :libraries do 

    carthage(
      platform: "iOS"
    )

  end

end